import jwt from 'jsonwebtoken'

import {
  getAccessTokenFromLocalStorage,
  getRefreshTokenFromLocalStorage,
  removeTokensFromLocalStorage,
  setAccessTokenToLocalStorage,
} from '@/shared/utils/local-storage'
import { TokenPayload } from '@/shared/types'
import authClientApi from '@/features/auth/api/client'

type CallbackOptions = {
  onUserNotLoggedIn?: () => void
  onRefreshTokenNotNeeded?: () => void
  onSuccess?: () => void
  onError?: () => void
}

export default async function checkAndRefreshToken(callbackOptions?: CallbackOptions) {
  // Kh√¥ng n√™n ƒë∆∞a logic l·∫•y access token v√† refresh token ra kh·ªèi function `checkAndRefreshToken`
  // V√¨ ƒë·ªÉ m·ªói l·∫ßn m√† g·ªçi function `checkAndRefreshToken` th√¨ s·∫Ω l·∫•y access token v√† refresh token m·ªõi
  // ƒê·ªÉ tr√°nh hi·ªán t∆∞·ª£ng bug n√≥ l·∫•y access token v√† refresh token c≈© ·ªü l·∫ßn ƒë·∫ßu r·ªìi g·ªçi cho c√°c l·∫ßn ti·∫øp theo
  const accessToken = getAccessTokenFromLocalStorage()
  const refreshToken = getRefreshTokenFromLocalStorage()

  // Ch∆∞a ƒëƒÉng nh·∫≠p th√¨ kh√¥ng c·∫ßn check refresh token
  if (!accessToken || !refreshToken) {
    callbackOptions?.onUserNotLoggedIn?.()
    return
  }

  const accessTokenDecoded = jwt.decode(accessToken) as TokenPayload
  const refreshTokenDecoded = jwt.decode(refreshToken) as TokenPayload

  // Th·ªùi ƒëi·ªÉm h·∫øt h·∫°n c·ªßa token ƒë∆∞·ª£c t√≠nh theo epoch time (s)
  // C√≤n khi d√πng c√∫ ph√°p `new Date().getTime()` th√¨ n√≥ s·∫Ω tr·∫£ v·ªÅ epoch time (ms) n√™n c·∫ßn chia cho 1000
  const now = Math.floor(new Date().getTime() / 1000)

  console.log('üî• ~ Th·ªùi gian c√≤n l·∫°i c·ªßa access token:', accessTokenDecoded.exp - now)
  console.log('üî• ~ Th·ªùi gian h·∫øt h·∫°n c·ªßa access token:', accessTokenDecoded.exp - accessTokenDecoded.iat)

  // V√≠ d·ª• access token c√≥ th·ªùi gian h·∫øt h·∫°n l√† 30s
  // th√¨ ch√∫ng ta s·∫Ω refresh token khi access token c√≤n 1/3 th·ªùi gian, t·ª©c c√≤n 10s
  // S·ªë gi√¢y c√≤n l·∫°i c·ªßa access token t·ª´ th·ªùi ƒëi·ªÉm hi·ªán t·∫°i, t√≠nh theo c√¥ng th·ª©c: accessTokenDecoded.exp - now (gi√¢y)
  // T·ªïng s·ªë gi√¢y m√† access token t·ªìn t·∫°i, t√≠nh theo c√¥ng th·ª©c: accessTokenDecoded.exp - accessTokenDecoded.iat (example: 15p = 900s)
  // S·ªë gi√¢y c√≤n l·∫°i c·ªßa access token nh·ªè h∆°n 1/3 t·ªïng s·ªë gi√¢y m√† access token t·ªìn t·∫°i th√¨ ti·∫øn h√†nh refresh token
  const shouldRefreshToken = accessTokenDecoded.exp - now < (accessTokenDecoded.exp - accessTokenDecoded.iat) / 3

  // Tr∆∞·ªùng h·ª£p KH√îNG C·∫¶N refresh token
  if (!shouldRefreshToken) {
    callbackOptions?.onRefreshTokenNotNeeded?.()
    return
  }

  // Tr∆∞·ªùng h·ª£p B·∫ÆT BU·ªòC PH·∫¢I refresh token nh∆∞ng khi ƒë√≥ refresh token ƒë√£ h·∫øt h·∫°n
  if (shouldRefreshToken && refreshTokenDecoded.exp <= now) {
    removeTokensFromLocalStorage(true)
    callbackOptions?.onError?.()
    return
  }

  if (shouldRefreshToken) {
    try {
      const response = await authClientApi.refreshTokenToServer()
      const { accessToken } = response.payload.data

      setAccessTokenToLocalStorage(accessToken)
      callbackOptions?.onSuccess?.()
    } catch (_error) {
      callbackOptions?.onError?.()
    }
  }
}
